@page "/"


@using Rolfin.Blazor.FluentValidation
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<button @onclick="changeValidationRoles" > Change </button>

<EditForm FormName="formName" Model="_model" OnValidSubmit="submite">

    <div style="display: flex; flex-direction: column; width: 50%; min-height: 300px; margin: auto;">

        <FluentFormValidator Model="Model" Roles="roles" @ref=_validator />

        <InputText @bind-Value=_model.Name />
        <ValidationMessage For="() => _model.Name" />

        <InputText @bind-Value=_model.MiddleName />
        <ValidationMessage For="() => _model.MiddleName" />

        <InputNumber @bind-Value=_model.Number />
        <ValidationMessage For="() => _model.Number" />

        <InputCheckbox @bind-Value=_model.IsSelected />

        <InputText @bind-Value=_model.Comment />
        <ValidationMessage For="() => _model.Comment" />

        <button type="submit">Save</button>

    </div>

</EditForm>



@code{
    Model _model = new();
    List<Model> _items = new()
    {
        new() { Name = "florin", Number = 10 }    
    };

    FluentFormValidator<Model>? _validator { get; set; }

    Action<ValidationBuilder<Model>> roles => (builder) =>
    {
        builder.RolesFor(x => x.Name).AddValidators(_items.Exists).NotNullOrWhiteSpace();
        builder.RolesFor(x => x.Number).AddValidators(_items.Exists).NotNullOrWhiteSpace();
        builder.RolesFor(x => x.MiddleName).NotNull();
        builder.RolesIfFor(x => x.IsSelected, prop => prop.Comment).NotNullOrWhiteSpace();
        builder.RolesForRow(() => _model.List, x => x.Id, prop => prop.InnerName).NotNullOrWhiteSpace();
    };

    void submite()
    {
    }

    void changeValidationRoles()
    {
        _validator?.ChangeRoles(builder =>
        {
            builder.RolesFor(x => x.Number).AddValidators(_items.Exists);
            builder.RolesFor(x => x.MiddleName).NotNull();
            builder.RolesIfFor(x => x.IsSelected, prop => prop.Comment).NotNullOrWhiteSpace();
        });
    }


    class Model
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public string? MiddleName { get; set; }
        public bool IsSelected { get; set; }
        public string Comment { get; set; }
        public InnerModel InnerModel { get; set; }
        public int Number { get; set; }

        public List<InnerModel> List { get; set; } = new() { 
            new() { Id = Guid.NewGuid(), InnerName = "florin" },
            new() { Id = Guid.NewGuid(), InnerName = "" },
            new() { Id = Guid.NewGuid(), InnerName = "" },
        };
    }

    class InnerModel
    {
        public Guid Id { get; set; }
        public string InnerName { get; set; }
    }
}